/**dynamic calculation video height*/
(function() {
	var mainWrapHeight = function() {
		$('#main-wrap').height($(window).height() - $('header').height() - $('footer').height() - 3);
	};
	mainWrapHeight();
})();

// 定义socket
var socket;

/**DOM loaded after handling things*/
$(function() {

	// 域名、IP分割，按域名优先排序
	var line = proxyAddrUrl.split(";");
	var emptyLine = [];
	line.forEach(function(val, num) {
		if(val.split("www").length - 1 == 1) {
			emptyLine.unshift(val);
		} else {
			emptyLine.push(val);
		}
	});
	console.log(emptyLine);

	// 递归函数判断代理服务器地址是否可用
	var i = 0;

	function buildWebSocket(i) {
		if(i < emptyLine.length) {
			try {
				var serverUrl = "ws://" + emptyLine[i];
				socket = new WebSocket(serverUrl);
				return socket;
			} catch(t) {
				i++;
				buildWebSocket(i);
			}
		}
	}
	/*	var i = 0;
		var socket;
		function buildWebSocket(i){
			while(true){					
				try{
					var serverUrl = "ws://" + emptyLine[i];
					socket = new WebSocket(serverUrl);
					break;
				}catch (t){
					i++;
					buildWebSocket(i);
				}
			}
		}*/
	/*	if(socket != "undefined"){
			setInterval();
		}*/

	// 创建一个Socket实例
	socket = buildWebSocket(i);
	// 打开Socket
	socket.onopen = function() {
		var fulldata = {
			selectedid : "",
			tabitems : [],
		};
		// 获取昵称	
		getNickName = sessionStorage.getItem("nickName");
		// 登录后发送JSON到代理服务器
		var nickNameMessage = '{"CmdId":30000,"RoomId":' + liveRoomId + ',"UserId":' + userId + ',"UserName":"' + getNickName + '","TokenId":"' + token.toString() + '"}';
		socket.send(nickNameMessage);

		$("#btnSend").click(function() {
			// 聊天窗口发送消息
			sendMsg(socket);
			// 消息列表滚动条在最底部
			scrollEvent();
		});

		//（全量数据画图处理）
		function dealFullData(dataAreaData) {
			// 存储数据
			StorgFullData(dataAreaData.TabItems);
			// 刷新选项卡
			drawTabletips();
			// 画每个选项卡的内容
			for(var i = 0; i < fulldata.tabitems.length; i++){
				// 创建DIV工作区域
				createTabletContents(dataAreaData,fulldata.tabitems[i]);				
				// 绘制内容
				drawTableContents(fulldata.tabitems[i].item.ID);				
			}
			// 把选中的选项卡的内容显示出来
			showSelected();
		}
		
		function createTabletContents(dataAreaData,Tabitem){
			switch(parseInt(Tabitem.item.type.val.toString())){
				// 1为白板
				case 1:
					// 创建canvas外围div
					var newdiv = document.createElement('div');
					newdiv.id = dataAreaData.TabItems.TabItemSel.val;
					newdiv.style.height = "100%";
					newdiv.style.overflow = "auto";
					newdiv.style.visibility = 'hidden';
					// 在div下插入canvas标签
					newdiv.innerHTML = "<canvas style=\"color:" + 
						StringToColor(Tabitem.item.WBItem.BkColor.color.toString()) + "\" width=\"" + 
						Tabitem.item.WBItem.Doc.Width + "\"  height=\"" + Tabitem.item.WBItem.Doc.Height + 
						"\" id=\"canvas_" + Tabitem.item.ID + "\"></canvas>";
					// 把Div下的canvas一起放到父级DIV
					document.getElementById("mainVideoWrap").appendChild(newdiv);
					var canvas = document.getElementById("canvas_" + Tabitem.item.ID);
					// 初始化canvas
					Tabitem.canv = canvas.getContext('2d');
					break;
				// 2为屏幕共享
				case 2:
					break;
				// 3为媒体共享
				case 3:
					break;
			}
		}
		
		function showSelected(){
			document.getElementById(fulldata.selectedid).style.visibility = "visible";
		}
		
		// 存储数据
		function StorgFullData(TabItems) {
			fulldata.selectedid = TabItems.TabItemSel.val;
			// 判断TabItems.TabItem是否为数组
			if(TabItems.TabItem instanceof Array) {
				for(var i = 0; i < TabItems.TabItem.length; i++){
					fulldata.tabitems[i] = { canv : null , item : TabItems.TabItem[i]};
				}
			} else {
				fulldata.tabitems[0] = { canv : null , item : TabItems.TabItem};
			}
		}
		
		// 画选项卡
		function drawTabletips() {
			//
		}
		
		// 画table内容
		function drawTableContents(idx) {
			var j = -1;
			for(var i = 0; i < fulldata.tabitems.length; i++){
				if(fulldata.tabitems[i].item.ID == idx){
					j = i;
				}
			}
			if(j == -1){
				return;
			}
			switch(parseInt(fulldata.tabitems[j].item.type.val.toString())){
				// 1为白板
				case 1:
					drawWBTable(fulldata.tabitems[j]);
					break;
				// 2为屏幕共享
				case 2:
					drawScreenShared(fulldata.tabitems[j]);
					break;
				// 3为媒体共享
				case 3:
					drawMediaShared(fulldata.tabitems[j]);
					break;	
			}
		}
		
		// canvas画图
		function drawWBTable(tabitem) {
			// 清除canvas
			tabitem.canv.clearRect(0,0,parseInt(tabitem.item.WBItem.Doc.Width),parseInt(tabitem.item.WBItem.Doc.Height));
			
			// 取出当前是第几页
			var idx = parseInt(tabitem.item.WBItem.Tool.Sel.toString());
			// 判断Page是否为数组
			if(tabitem.item.WBItem.Doc.Page instanceof Array){
				for(var i = 0;i < tabitem.item.WBItem.Doc.Page.length;i++){
					// 向canvas中画图
					if(idx == parseInt(tabitem.item.WBItem.Doc.Page[i].Id.toString())){
						drawObjs(tabitem.canv, tabitem.item.WBItem.Doc.Page[i]);
					}else{
						return
					}
				}
			}else{
				if(idx == parseInt(tabitem.item.WBItem.Doc.Page.Id.toString())){
					drawObjs(tabitem.canv, tabitem.item.WBItem.Doc.Page);
				}
			}
		}
		
		// 画一页所有的Obj
		function drawObjs(canv, Page){
			// 判断Page是否为空值（空值则无Obj）
			if("Obj" in Page){
				if(Page.Obj instanceof Array){
					for(var i = 0; i < Page.Obj.length;i++){
						drawingPic(canv, Page.Obj[i]);
					}
				}else{
					drawingPic(canv, Page.Obj);
				}
			}else{
				return;
			}
			
		}
	
		//（增删改画图）
		function dealPartData(eveData) {
			switch(eveData.OperationType){
				// 增量画图
				case 1: 
					dealaddData(eveData.OperationPath, JSON.parse(eveData.OperationData));
					break;
				// 修改画图
				case 2:
					dealAmendData();
					break;
				// 删除画图
				case 3:
					dealDeleteData();
					break;
			}
		}
		
		// 增量数据处理（画图）
		function dealaddData(path, data){
			// path
			var paths = path.split("/");
			if(paths.length < 1){
				return;
			}
			if(paths[0] != "TabItems") {
				return;
			}
			// 增加了一个完整的Table
			if(paths.length == 1){
				var len = fulldata.tabitems.length;
				fulldata.tabitems[len].canv = null;
				fulldata.tabitems[len].item = data;
				// 重绘tips
				drawTabletips();
				// 创建tabContents
				createTabletContents(data);
				// 绘制tabContents
				drawTableContents(data.ID);
			}
			// 切换table
			else if("TabItemSel" == paths[1].split(" ")[0]){
				
			}
			// 修改table中的数据（增删改），只有白板才会有增删改
			else if("TabItem" == paths[1].split(" ")[0])
			{
				// 取出ID
				var idx = paths[1].split(" ")[1].split("=")[1];
				for(var i = 0; i < fulldata.tabitems.length; i++)
				{
					if(fulldata.tabitems[i].item.ID == idx)
					{
						// 遍历全局的Page的Id跟增量的Page的Id是否相等
						for(var j = 0;j < fulldata.tabitems[i].item.WBItem.Doc.Page.length;j++){
							var pageid = paths[4].split(" ")[1].split("=")[1];
							if(fulldata.tabitems[i].item.WBItem.Doc.Page[j].Id == pageid){
								// 判断obj是否为数组
								if(fulldata.tabitems[i].item.WBItem.Doc.Page[j].Obj instanceof Array){
									// 把增量的Obj存入全局的Obj数组中
									fulldata.tabitems[i].item.WBItem.Doc.Page[j].Obj.push(data.Obj);
								}else{
									// 创建数组，把增量Obj存入全局Obj数组中
									var tmpobj = {
										arrayObj : fulldata.tabitems.item.WBItem.Doc.Page.Obj,
									};
									arr = [tmpobj.arrayObj].push(data.Obj);
									fulldata.tabitems[i].item.WBItem.Doc.Page[j].Obj = arr;
								}
							}else{
								return;
							}
						}
						//绘制这个增量
						var pageid = paths[4].split(" ")[1].split("=")[1];
						if(pageid == fulldata.tabitems[i].item.WBItem.Tool.Sel)
						{
							var objs = data.Obj;
							drawingPic(fulldata.tabitems[i].canv, objs);
						}else{
							return;
						}
						return;
					}
				}
			}
		}
		
		// 修改数据处理（画图）
		function dealAmendData(){
			
		}
		
		// 删除数据处理（画图）
		function dealDeleteData(){
			
		}
		
		// canvas图形函数
		function drawingPic(canv, objs) {
			if(objs.Type == 1) {
				// 直线
				drawingLine(canv, objs.LS, objs.LW, StringToColor(objs.LC), objs.Pt);
			} else if(objs.Type == 2) {
				// 箭头直线
				drawingArrows(canv, objs.LS, objs.LW, StringToColor(objs.LC), objs.Pt);
			} else if(objs.Type == 3) {
				// 手写笔
				drawingPen(canv, objs.LS, objs.LW, StringToColor(objs.LC), objs.Pt);
			} else if(objs.Type == 4) {
				// 荧光笔
				drawingLightPen(canv, objs.LS, objs.LW, StringToColor(objs.LC), objs.Pt);
			} else if(objs.Type == 5) {
				// 矩形
				drawingRectangle(canv, objs.LS, objs.LW, StringToColor(objs.LC), StringToColor(objs.BC), objs.Pt);
			} else if(objs.Type == 6) {
				// 圆角矩形
				drawingRoundedRectangle(canv, objs.LS, objs.LW, StringToColor(objs.LC), StringToColor(objs.BC), objs.Pt);
			} else if(objs.Type == 7) {
				// 椭圆
				drawingEllipse(canv, objs.LS, objs.LW, StringToColor(objs.LC), StringToColor(objs.BC), objs.Pt);
			} else if(objs.Type == 8) {
				// 文字
				drawingWord(canv, objs.LS, objs.Font.Height, StringToColor(objs.TC), objs.Pt, objs.Text);
			}
		}

		// 监听消息
		socket.onmessage = function(event) {
			// 获取聊天界面数据
			var show = $(".chat-content");
			// 接收、并显示消息
			var oldMsg = show.html();
			show.html(oldMsg + event.data);

			// 解析JSON成字符串格式	
			var eveData = JSON.parse(event.data);
			// 全量数据画图
			if(eveData.CmdId == "30004") {
				// 画图
				dealFullData(JSON.parse(eveData.DataArea.Data));
			}
			// 增量数据画图
			else if(eveData.CmdId == "30005") {
				// 画图
				dealPartData(eveData);
			}
			// 从服务器接收数据返回页面
			else if(eveData.CmdId == "30009") {
				$(".chat-content").html(event.data);
			}
			// 房间销毁处理
			else if(eveData.CmdId == "30010") {
				alert("直播房间已关闭！");
				window.location.href = "/live/" + liveURI;
			}
			// 消息列表滚动条在最底部
			scrollEvent();
		};

		// 退出房间操作
		$("#exit").click(function() {
			var exitMessage = '{"CmdId":30002,"RoomId":' + liveRoomId + ',"UserId":' + userId + '}';
			socket.send(exitMessage);
			socket.close();
			window.location.href = "/live/" + liveURI;
		});

		// 监听Socket的关闭
		socket.onclose = function(event) {
			/*alert('Client notified socket has closed',event);*/
		};

	};
});

function sendMsg(socket) {
	// 聊天窗口发送消息	
	var textareaMsg = $("#show"); // 获取聊天窗口数据
	sessionStorage.setItem("textareaElement", textareaMsg.val().trim()); // 存储聊天窗口消息
	getTextareaElement = sessionStorage.getItem("textareaElement").toString(); // 获取聊天窗口消息并转化成字符串格式	
	// 发送数据到服务器返回页面
	var chatMessageJson = '{"CmdId":30008,"RoomId":' + liveRoomId + ',"UserId":' + userId + ',"ChatMsg":"' + getTextareaElement + '"}';
	socket.send(chatMessageJson);
	var chatContent = $(".chat-content");
	// 接收、并显示消息
	var chatContentOldMsg = chatContent.html();
	chatContent.html(chatContentOldMsg + chatMessageJson);
	textareaMsg.val(""); // 发送之后清空文本框
	$("#btnSend").css({
		"cursor": "not-allowed",
		"background": "#d3dde6",
	});
	$("#btnSend").attr("disabled", true);
}